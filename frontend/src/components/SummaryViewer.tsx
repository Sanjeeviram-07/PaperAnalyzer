import React, { useState, useRef, useEffect } from 'react';
import { FileText, Volume2, Play, Pause, Download, Share2, ExternalLink, Hash, Brain, Headphones, BookOpen, Tag, Copy, Check } from 'lucide-react';
import CitationViewer from './CitationViewer';
import CrossPaperSynthesisViewer from './CrossPaperSynthesisViewer';

interface SummaryViewerProps {
  data: {
    summary: string;
    classification: string;
    audio: string;
    source_info?: any;
    citations?: any;
  };
}

export default function SummaryViewer({ data }: SummaryViewerProps) {
  const [audioError, setAudioError] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [audioLoading, setAudioLoading] = useState(false);
  const [activeSummaryTab, setActiveSummaryTab] = useState<'full' | 'tldr'>('full');
  const [copied, setCopied] = useState(false);
  const audioRef = useRef<HTMLAudioElement>(null);

  if (!data) return null;

  const handleAudioError = (e: any) => {
    setAudioError(true);
    console.error('Audio playback error:', e);
    console.error('Audio source:', data.audio);
    console.error('Full audio URL:', `http://localhost:8000/${data.audio}`);
  };

  // Add debugging for audio availability
  useEffect(() => {
    console.log('SummaryViewer - Audio data:', {
      audio: data.audio,
      audioType: typeof data.audio,
      audioLength: data.audio ? data.audio.length : 0,
      fullUrl: data.audio ? `http://localhost:8000/${data.audio}` : 'No audio'
    });
  }, [data.audio]);

  const toggleAudio = async () => {
    if (audioRef.current) {
      try {
        setAudioLoading(true);
        if (isPlaying) {
          audioRef.current.pause();
        } else {
          await audioRef.current.play();
        }
      } catch (error) {
        console.error('Audio play error:', error);
        setAudioError(true);
      } finally {
        setAudioLoading(false);
      }
    }
  };

  const handleTimeUpdate = () => {
    if (audioRef.current) {
      setCurrentTime(audioRef.current.currentTime);
    }
  };

  const handleLoadedMetadata = () => {
    if (audioRef.current) {
      setDuration(audioRef.current.duration);
      console.log('Audio loaded successfully, duration:', audioRef.current.duration);
    }
  };

  const handlePlay = () => {
    setIsPlaying(true);
    console.log('Audio started playing');
  };

  const handlePause = () => {
    setIsPlaying(false);
    console.log('Audio paused');
  };

  const handleEnded = () => {
    setIsPlaying(false);
    setCurrentTime(0);
    console.log('Audio ended');
  };

  const handleCanPlay = () => {
    console.log('Audio can play');
    setAudioError(false);
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (audioRef.current && duration > 0) {
      const rect = e.currentTarget.getBoundingClientRect();
      const clickX = e.clientX - rect.left;
      const clickPercent = clickX / rect.width;
      const newTime = clickPercent * duration;
      audioRef.current.currentTime = newTime;
    }
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const downloadSummary = () => {
    const content = `Research Summary\n\n${data.summary}\n\nClassification: ${data.classification}\n\nGenerated by PaperAnalyzer`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'research-summary.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Debug logging when data changes
  useEffect(() => {
    if (data?.audio) {
      console.log('Audio path received:', data.audio);
      console.log('Full audio URL:', `http://localhost:8000/${data.audio}`);
    }
  }, [data?.audio]);

  return (
    <div className="space-y-8">
      {/* Header Info */}
      <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
          <div className="flex-1">
            <h1 className="text-3xl font-bold text-white mb-4">
              {data.source_info?.title || 'Research Paper Analysis'}
            </h1>
            <div className="space-y-2 text-purple-200">
              <p className="text-lg">
                <span className="font-semibold">Authors:</span> {data.source_info?.authors?.join(', ') || 'Unknown'}
              </p>
              <p>
                <span className="font-semibold">Published:</span> {data.source_info?.year || 'Unknown'} â€¢ {data.source_info?.journal || 'Unknown Journal'}
              </p>
              {data.source_info?.doi && (
                <p>
                  <span className="font-semibold">DOI:</span> {data.source_info.doi}
                </p>
              )}
            </div>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            {(data.source_info?.url || data.source_info?.doi) && (
              <button
                onClick={() => {
                  const url = data.source_info.url || `https://doi.org/${data.source_info.doi}`;
                  window.open(url, '_blank');
                }}
                className="flex items-center justify-center space-x-2 bg-gradient-to-r from-teal-500 to-teal-600 hover:from-teal-400 hover:to-teal-500 text-white px-6 py-3 rounded-xl transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                <ExternalLink className="w-4 h-4" />
                <span>View Source</span>
              </button>
            )}
            <button
              onClick={downloadSummary}
              className="flex items-center justify-center space-x-2 bg-white/10 backdrop-blur-sm hover:bg-white/20 border border-white/20 text-white px-6 py-3 rounded-xl transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              <Download className="w-4 h-4" />
              <span>Download Summary</span>
            </button>
            <button
              onClick={() => copyToClipboard(window.location.href)}
              className="flex items-center justify-center space-x-2 bg-white/10 backdrop-blur-sm hover:bg-white/20 border border-white/20 text-white px-6 py-3 rounded-xl transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              {copied ? <Check className="w-4 h-4" /> : <Share2 className="w-4 h-4" />}
              <span>{copied ? 'Copied!' : 'Share'}</span>
            </button>
          </div>
        </div>
      </div>

      {/* AI Summary */}
      <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-white flex items-center">
            <Brain className="w-6 h-6 mr-3 text-teal-400" />
            AI Summary
          </h2>
          
          {/* Summary Tabs */}
          <div className="flex bg-white/10 backdrop-blur-sm rounded-xl p-1 border border-white/20">
            <button
              onClick={() => setActiveSummaryTab('full')}
              className={`px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-200 ${
                activeSummaryTab === 'full'
                  ? 'bg-gradient-to-r from-teal-500 to-teal-600 text-white shadow-lg'
                  : 'text-purple-200 hover:text-white hover:bg-white/10'
              }`}
            >
              Full Summary
            </button>
            <button
              onClick={() => setActiveSummaryTab('tldr')}
              className={`px-4 py-2 rounded-lg text-sm font-semibold transition-all duration-200 ${
                activeSummaryTab === 'tldr'
                  ? 'bg-gradient-to-r from-teal-500 to-teal-600 text-white shadow-lg'
                  : 'text-purple-200 hover:text-white hover:bg-white/10'
              }`}
            >
              TL;DR
            </button>
          </div>
        </div>
        
        <div className="bg-white/5 backdrop-blur-sm rounded-xl p-6 border border-white/10">
          <p className="text-white leading-relaxed text-lg">
            {activeSummaryTab === 'full' ? data.summary : data.summary.split('. ').slice(0, 3).join('. ') + '.'}
          </p>
        </div>
      </div>

      {/* Audio Summary */}
      <div className="bg-purple-700/50 rounded-xl p-8">
        <h2 className="text-2xl font-semibold text-white mb-6 flex items-center">
          <Headphones className="w-6 h-6 mr-2 text-teal-400" />
          Audio Summary
        </h2>

        {data.audio && !audioError ? (
          <div className="bg-purple-800/50 rounded-xl p-6">
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center space-x-4">
                <button
                  onClick={toggleAudio}
                  disabled={audioLoading}
                  className="w-14 h-14 bg-teal-500 hover:bg-teal-600 disabled:bg-gray-600 rounded-full flex items-center justify-center transition-colors shadow-lg"
                >
                  {audioLoading ? (
                    <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  ) : isPlaying ? (
                    <Pause className="w-6 h-6 text-white" />
                  ) : (
                    <Play className="w-6 h-6 text-white ml-1" />
                  )}
                </button>
                <div>
                  <p className="text-white font-medium text-lg">Podcast-style Narration</p>
                  <p className="text-purple-300 text-sm">Listen to the research summary</p>
                </div>
              </div>
              <button
                className="flex items-center space-x-2 text-purple-300 hover:text-white transition-colors"
                onClick={() => {
                  if (audioRef.current) {
                    const link = document.createElement('a');
                    link.href = audioRef.current.src;
                    link.download = 'audio-summary.mp3';
                    link.click();
                  }
                }}
              >
                <Download className="w-4 h-4" />
                <span className="text-sm">Download MP3</span>
              </button>
            </div>

            {/* Audio Progress Bar */}
            <div
              className="w-full bg-purple-600 rounded-full h-3 mb-3 cursor-pointer"
              onClick={handleProgressClick}
            >
              <div
                className="bg-teal-400 h-3 rounded-full transition-all duration-300"
                style={{ width: duration > 0 ? `${(currentTime / duration) * 100}%` : '0%' }}
              ></div>
            </div>
            <div className="flex justify-between text-purple-300 text-sm">
              <span>{formatTime(currentTime)}</span>
              <span>{formatTime(duration)}</span>
            </div>

            {/* Audio Element */}
            <audio
              ref={audioRef}
              onError={handleAudioError}
              onPlay={handlePlay}
              onPause={handlePause}
              onEnded={handleEnded}
              onTimeUpdate={handleTimeUpdate}
              onLoadedMetadata={handleLoadedMetadata}
              onCanPlay={handleCanPlay}
              preload="metadata"
              crossOrigin="anonymous"
            >
              <source src={`http://localhost:8000/${data.audio}`} type="audio/mp3" />
              Your browser does not support the audio element.
            </audio>
          </div>
        ) : (
          <div className="bg-purple-800/50 rounded-xl p-8 text-center">
            <Headphones className="w-16 h-16 text-purple-400 mx-auto mb-4" />
            <p className="text-purple-300 text-lg">
              {audioError ? 'Audio playback failed' : 'Audio not available'}
            </p>
            {audioError && (
              <button
                onClick={() => setAudioError(false)}
                className="mt-4 text-teal-400 hover:text-teal-300 text-sm"
              >
                Try again
              </button>
            )}
          </div>
        )}
      </div>

      {/* Topic Classification */}
      <div className="bg-purple-700/50 rounded-xl p-8">
        <h2 className="text-2xl font-semibold text-white mb-6 flex items-center">
          <Tag className="w-6 h-6 mr-2 text-teal-400" />
          Topic Classification
        </h2>
        
        <div className="bg-purple-800/50 rounded-xl p-6">
          <div className="flex flex-wrap gap-3">
            <span className="bg-teal-500 text-white px-4 py-2 rounded-full text-sm font-medium">
              {data.classification}
            </span>
            {/* Additional topics could be added here */}
          </div>
        </div>
      </div>

      {/* Citation Section */}
      {data.source_info && data.citations && (
        <>
          {/* Check if this is a cross-paper synthesis */}
          {data.citations.papers && Array.isArray(data.citations.papers) ? (
            <CrossPaperSynthesisViewer sourceInfo={data.source_info} citations={data.citations} />
          ) : (
            <CitationViewer sourceInfo={data.source_info} citations={data.citations} />
          )}
        </>
      )}
    </div>
  );
}
  